<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_rest_message_fn_parameters">
    <sys_rest_message_fn_parameters action="INSERT_OR_UPDATE">
        <name>script</name>
        <rest_message_function display_value="post">974746272b746a00b41b27b436da1506</rest_message_function>
        <sys_class_name>sys_rest_message_fn_parameters</sys_class_name>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2016-07-30 00:08:58</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>86bf822b2b746a00b41b27b436da15f4</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>script</sys_name>
        <sys_package display_value="Timeline Details" source="x_milte_timedetail">1e12c3a42be79640b41b27b436da15f2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Timeline Details">1e12c3a42be79640b41b27b436da15f2</sys_scope>
        <sys_update_name>sys_rest_message_fn_parameters_86bf822b2b746a00b41b27b436da15f4</sys_update_name>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2016-07-30 00:52:22</sys_updated_on>
        <type>string</type>
        <value>var TimelineItem = GlideTimelineItem, StringUtil = GlideStringUtil; Array.prototype.map = function (e) { for (var t = [], i = 0; i &lt; this.length; i++) t.push(e(this[i])); return t }, Array.prototype.filter = function (e) { \"use strict\"; if (void 0 === this || null === this) throw new TypeError; var t = Object(this), i = t.length &gt;&gt;&gt; 0; if (\"function\" != typeof e) throw new TypeError; for (var r = [], n = arguments.length &lt; 2 ? void 0 : arguments[1], a = 0; i &gt; a; a++) if (a in t) { var s = t[a]; e.call(n, s, a, t) &amp;&amp; r.push(s) } return r }; var TaskTimeLine2 = Class.create(); TaskTimeLine2.prototype = Object.extendsObject(AbstractTimelineSchedulePage, { getItems: function () { var e = this.getParameter(\"sysparm_timeline_task_id\"), t = this.getParameter(\"sysparm_timeline_table\"), i = { ticketNumbers: [], processingMultiple: !1 }; if (this.setPageTitle(t + \" Timeline\"), (e + \"\").indexOf(\",\") &gt; -1) for (var r = (e + \"\").split(\",\"), n = 0; n &lt; r.length; n++) i.processingMultiple = !0, this._drawTimeLineForRecord(t, r[n], i); else this._drawTimeLineForRecord(t, e, i) }, _drawTimeLineForRecord: function (e, t, i) { this.scopeName = \"x_milte_timedetail\"; try { gs.info(\"table: \" + e + \" taskID: \" + t); var r = new GlideRecord(e); if (r.get(t)) { var n = \"\"; void 0 === r.number || r.number.nil() ? void 0 === r.name || r.name.nil() ? (this.setPageTitle(\" Timeline details for \" + (r.sys_id + \"\")), n = r.sys_id + \"\") : (this.setPageTitle(\" Timeline details for \" + (r.name + \"\")), n = r.name + \"\") : (n = r.number, this.setPageTitle(\" Timeline details for \" + n)), gs.nil(i) || (i.processingMultiple &amp;&amp; i.ticketNumbers.push(n), i.ticketNumbers.length &gt; 1 &amp;&amp; this.setPageTitle(\" Timeline details for \" + i.ticketNumbers)); var a = new global.GlideTimelineItem(n); a.setLeftLabelText(n), a.setImage(\"../images/icons/all.gifx\"), a.setTextBold(!0); var s = this._getSnapshotTable(e), l = this._getEarliestStartTime(r, e, s), o = l.startTime, d = this._getLatestEndTime(r, e, s), g = d.endTime, m = new GlideDuration, u = l.startTimeDTO, p = d.endTimeDTO; if (d.useCurrentTime) { var c = new GlideDateTime(gs.nowNoTZ()); m = GlideDateTime.subtract(u, c) } else m = GlideDateTime.subtract(u, p); var _ = m.getDisplayValue(); ticketSpan = a.createTimelineSpan(e, r.sys_id), ticketSpan.setTimeSpan(o, g), ticketSpan.setSpanText(_), ticketSpan.setTooltip(this._generateTopToolTip(r, e, l.startTimeDTO.getDisplayValue(), d.endTimeDTO.getDisplayValue(), _, !1, !1, d.useCurrentTime)), ticketSpan.setSpanColor(\"#F5DEB3\"), this.add(a), this._generateSpannedItems(r, n, e, s) } } catch (f) { gs.log(\"Error: \" + f.message, \"lifeg\") } }, _generateSpannedItems: function (e, t, i, r) { var n = [], a = new GlideRecord(\"x_milte_timedetailgantt_field\"); for (a.addQuery(\"snapshot_definition.source_table.name\", i), a.orderBy(\"order\"), a.query() ; a.next() ;) { var s = this._isTriggerField(i, a.field.element + \"\"), l = !1; (\"tree_only\" == a.type || \"tree___tooltip\" == a.type) &amp;&amp; (l = !0), n.push({ name: a.field.element + \"\", table: a.field.name + \"\", isTrigger: s, label: l }) } var o = []; o = this._createHierarchy(n), this._generateLabels(o, i, r, e) }, _isTriggerField: function (e, t) { var i = !1, r = new GlideAggregate(\"x_milte_timedetailsnapshot_trigger\"); r.addQuery(\"snapshot_definition.source_table.name\", e), r.addQuery(\"trigger_field.element\", t), r.addAggregate(\"COUNT\"), r.query(); var n = 0; return r.next() &amp;&amp; (n = r.getAggregate(\"COUNT\")), n &gt; 0 &amp;&amp; (i = !0), i }, _getDurationColor: function (e) { return e.indexOf(\"Month\") &gt; -1 ? \"#DC143C\" : e.indexOf(\"Week\") &gt; -1 ? \"#008000\" : e.indexOf(\"Day\") &gt; -1 ? \"#800080\" : e.indexOf(\"Hour\") &gt; -1 ? \"#0000FF\" : e.indexOf(\"Minute\") &gt; -1 ? \"#ff9416\" : \"#FFD700\" }, _getEarliestStartTime: function (e, t, i) { var r = { startTime: 0 }, n = new GlideRecord(\"task_sla\"), a = \"task.sys_class_name=\" + i + \"^task.ref_\" + i + \".\" + this.scopeName + \"_\" + t + \".sys_id=\" + (e.sys_id + \"\"); return gs.info(\"early query: \" + a), n.addEncodedQuery(a), n.orderBy(\"start_time\"), n.query(), n.next() &amp;&amp; (r.startTime = n.getElement(\"start_time\").getGlideObject().getNumericValue(), r.startTimeDTO = n.getElement(\"start_time\").getGlideObject()), r }, _getLatestEndTime: function (e, t, i) { var r = { endTime: 0, useCurrentTime: !1 }, n = new GlideRecord(\"task_sla\"), a = \"task.sys_class_name=\" + i + \"^task.ref_\" + i + \".\" + this.scopeName + \"_\" + t + \".sys_id=\" + (e.sys_id + \"\"); return n.addEncodedQuery(a), n.orderByDesc(\"start_time\"), n.query(), n.next() &amp;&amp; (r.endTime = n.getElement(\"end_time\").getGlideObject().getNumericValue(), n.end_time.nil() &amp;&amp; (r.endTime = new GlideDateTime(gs.nowNoTZ()).getNumericValue(), r.useCurrentTime = !0), r.endTimeDTO = n.getElement(\"end_time\").getGlideObject()), r }, _generateTopToolTip: function (e, t, i, r, n, a, s, l) { var o = \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:5px;\"&gt;\', d = new GlideRecord(\"x_milte_timedetailgantt_field\"); for (d.addQuery(\"snapshot_definition.source_table.name\", t), d.addQuery(\"type\", \"IN\", \"tree___tooltip,tooltip_only\"), d.orderByDesc(\"title_field\"), d.orderBy(\"order\"), d.query() ; d.next() ;) if (d.title_field) o += \"&lt;strong&gt;&lt;font color=blue&gt;\" + global.StringUtil.escapeHTML(e[d.field.element]) + \"&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;\", o += \"&lt;/div&gt;\", o += \'&lt;div style=\"padding-top:5px;\"&gt;\'; else { var g = global.StringUtil.escapeHTML(e[d.field.element].getDisplayValue()); (gs.nil(g) || \"\" == g) &amp;&amp; (g = \"Not Set\"), o += this._isTriggerField(t, d.field.element + \"\") ? \'&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:5px;\"/&gt;&lt;strong&gt;\' + d.field.column_label + \": &lt;/strong&gt;&lt;font color=blue&gt;\" + g + \"&lt;/font&gt;&lt;br/&gt;\" : \"&lt;strong&gt;\" + d.field.column_label + \": &lt;/strong&gt;&lt;font color=blue&gt;\" + g + \"&lt;/font&gt;&lt;br/&gt;\" } return o += \"&lt;strong&gt;Actual Start: &lt;/strong&gt;&lt;font color=blue&gt;\" + i + \"&lt;/font&gt;&lt;br /&gt;\", l ? (o += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;Not Set&lt;/font&gt;&lt;br /&gt;\", o += \"&lt;strong&gt;Total Current Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + n + \"&lt;/font&gt;&lt;br /&gt;\") : (o += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;\" + r + \"&lt;/font&gt;&lt;br /&gt;\", o += \"&lt;strong&gt;Total Actual Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + n + \"&lt;/font&gt;&lt;br /&gt;\"), o += \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:4px;\"&gt;&lt;/div&gt;\', o += \'&lt;div style=\"margin-top:5px\"&gt;&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:2px;margin-left:2px;\"/&gt; = Trigger field&lt;/div&gt;\', o += \'&lt;div style=\"padding-top:4px;\"&gt;\', o += \"&lt;/div&gt;&lt;/div&gt;\" }, _generateToolTips: function (e, t, i, r, n, a, s, l) { var o = e.task.snapshot_created_trigger + \"\", d = e.task.snapshot_completed_trigger + \"\", g = \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:5px;\"&gt;\', m = new GlideRecord(\"x_milte_timedetailgantt_field\"); for (m.addQuery(\"snapshot_definition.source_table.name\", t), m.addQuery(\"type\", \"IN\", \"tree___tooltip,tooltip_only\"), m.orderByDesc(\"title_field\"), m.orderBy(\"order\"), m.query() ; m.next() ;) if (m.title_field) g += \"&lt;strong&gt;&lt;font color=blue&gt;\" + global.StringUtil.escapeHTML(e.task[m.field.element]) + \"&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;\", g += \"&lt;/div&gt;\", g += \'&lt;div style=\"padding-top:5px;\"&gt;\'; else { var u = global.StringUtil.escapeHTML(e.task[m.field.element].getDisplayValue()); (gs.nil(u) || \"\" == u) &amp;&amp; (u = \"Not Set\"), g += this._isTriggerField(t, m.field.element + \"\") ? \'&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:5px;\"/&gt;&lt;strong&gt;\' + m.field.column_label + \": &lt;/strong&gt;&lt;font color=blue&gt;\" + u + \"&lt;/font&gt;&lt;br/&gt;\" : \"&lt;strong&gt;\" + m.field.column_label + \": &lt;/strong&gt;&lt;font color=blue&gt;\" + u + \"&lt;/font&gt;&lt;br/&gt;\" } return 1 == a &amp;&amp; (g += \"&lt;strong&gt;Start Trigger: &lt;/strong&gt;&lt;font color=blue&gt;\" + o + \"&lt;/font&gt;&lt;br /&gt;\"), 1 == s &amp;&amp; (g += \"&lt;strong&gt;Stop Trigger: &lt;/strong&gt;&lt;font color=blue&gt;\" + d + \"&lt;/font&gt;&lt;br /&gt;\"), g += \"&lt;strong&gt;Actual Start: &lt;/strong&gt;&lt;font color=blue&gt;\" + i + \"&lt;/font&gt;&lt;br /&gt;\", l ? (g += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;Not Set&lt;/font&gt;&lt;br /&gt;\", g += \"&lt;strong&gt;Current Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + n + \"&lt;/font&gt;&lt;br /&gt;\") : (g += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;\" + r + \"&lt;/font&gt;&lt;br /&gt;\", g += \"&lt;strong&gt;Actual Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + n + \"&lt;/font&gt;&lt;br /&gt;\"), g += \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:4px;\"&gt;&lt;/div&gt;\', g += \'&lt;div style=\"margin-top:5px\"&gt;&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:2px;margin-left:2px;\"/&gt; = Trigger field&lt;/div&gt;\', g += \'&lt;div style=\"padding-top:4px;\"&gt;\', g += \"&lt;/div&gt;&lt;/div&gt;\" }, inputBox: function (e) { var t = this.getParameter(\"sysparm_timeline_table\"), i = { ticketNumbers: [], processingMultiple: !1 }; gs.info(\"inputBox - table: \" + t + \" number: \" + e); var r = new GlideRecord(t); return r.addQuery(\"sys_class_name\", t), r.addQuery(\"number\", e), r.query(), r.next() ? (this._drawTimeLineForRecord(t, r.sys_id + \"\", i), this.setDoReRenderTimeline(!0)) : void 0 }, _guid: function () { function e() { return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1) } return e() + e() + \"-\" + e() + \"-\" + e() + \"-\" + e() + \"-\" + e() + e() + e() }, _generateLabels: function (e, t, i, r) { var n = { spans: [] }, a = this._getTopTierValues(t, i, r, e[0]); this._valConstruct(n, t, i, r, a, e, 0, null, null), n.spans.sort(this._compare); for (var s = [], l = 0; l &lt; n.spans.length; l++) { var o = new global.TimelineItem(t, n.spans[l].guid); o.setLeftLabelText(n.spans[l].label), o.setParent(r.number); var d = o.createTimelineSpan(t, n.spans[l].guid); d.setSpanText(1 == n.spans[l].useTextLabel ? n.spans[l].textLabel : n.spans[l].durationDisplay), d.setTimeSpan(n.spans[l].startTime, n.spans[l].endTime), d.setTooltip(n.spans[l].tooltip), d.setSpanColor(n.spans[l].color), s.push(o) } for (var g = 0; g &lt; s.length; g++) this.add(s[g]) }, _compare: function (e, t) { return e.startTime &lt; t.startTime ? -1 : e.startTime &gt; t.startTime ? 1 : 0 }, _valConstruct: function (e, t, i, r, n, a, s, l, o) { for (var d = 0; d &lt; n.length; d++) { var g = \"\"; if (gs.nil(l) || (g = l), a[s].label) if (\"\" == g) var g = n[d].label + \"\"; else g += \" -&gt; \" + (n[d].label + \"\"); if (void 0 !== a[s + 1]) { var m = \"\"; gs.nil(o) || (m = o), m += a[s].table + \"\" == \"task\" ? \"^task.\" + (a[s].name + \"\") + \"=\" + (n[d].name + \"\") : \"^task.ref_\" + (i + \"\") + \".\" + (a[s].name + \"\") + \"=\" + (n[d].name + \"\"); var u = s + 1, p = this._getTopTierValues(t, i, r, a[u], m); this._valConstruct(e, t, i, r, p, a, u, g, m) } else { var m = \"\"; gs.nil(o) || (m = o), m += a[s].table + \"\" == \"task\" ? \"^task.\" + (a[s].name + \"\") + \"=\" + (n[d].name + \"\") : \"^task.ref_\" + (i + \"\") + \".\" + (a[s].name + \"\") + \"=\" + (n[d].name + \"\"), this._createTimeSpans(e, t, i, r, m, g) } } }, _getTopTierValues: function (e, t, i, r, n) { var a = [], s = new GlideRecord(\"task_sla\"), l = \"task.sys_class_name=\" + t + \"^task.ref_\" + t + \".\" + this.scopeName + \"_\" + e + \".sys_id=\" + i.sys_id; for (gs.nil(n) || (l += n), s.addEncodedQuery(l), s.orderBy(\"start_time\"), s.query() ; s.next() ;) { for (var o = !1, d = 0; d &lt; a.length; d++) (a[d].name == s.task[r.name] || \"\" == a[d].name &amp;&amp; s.task[r.name].nil()) &amp;&amp; (o = !0); 0 == o &amp;&amp; a.push(s.task[r.name].nil() ? { name: \"\", label: \"Not Set\" } : { name: s.task[r.name] + \"\", label: s.task[r.name].getDisplayValue() }) } return a }, _createTimeSpans: function (e, t, i, r, n, a) { var s = new GlideRecord(\"task_sla\"), l = \"task.sys_class_name=\" + i + \"^task.ref_\" + i + \".\" + this.scopeName + \"_\" + t + \".sys_id=\" + r.sys_id; for (gs.nil(n) || (l += n), s.addEncodedQuery(l), s.orderBy(\"start_time\"), s.query() ; s.next() ;) { var o = s.getElement(\"start_time\").getGlideObject().getNumericValue(), d = s.start_time.getDisplayValue(), g = s.getElement(\"end_time\").getGlideObject().getNumericValue(), m = !1; s.end_time.nil() &amp;&amp; (g = new GlideDateTime(gs.nowNoTZ()).getNumericValue(), m = !0); var u = new GlideDuration, p = s.getElement(\"start_time\").getGlideObject(), c = s.getElement(\"end_time\").getGlideObject(); if (m) { var _ = new GlideDateTime(gs.nowNoTZ()); u = GlideDateTime.subtract(p, _) } else u = GlideDateTime.subtract(p, c); var f = u.getDisplayValue(), T = s.end_time.getDisplayValue(), b = s.sys_id + \"_\" + this._guid(), h = new GlideRecord(\"x_milte_timedetail_snapshot_definition\"); h.addQuery(\"source_table.name\", t), h.addQuery(\"snapshot_table.name\", i), h.query(); var y = \"\", v = !1, x = !1, k = !1; if (h.next()) { if (\"text_fields\" == h.show_span) { v = !0; for (var D = (h.span_text_fields + \"\").split(\",\"), w = 0; w &lt; D.length; w++) { var S = D[w], N = s.task[S].getDisplayValue(); gs.nil(N) &amp;&amp; (N = \"Not Set\"), \"\" == y ? y = N : y += \", \" + N } } else (\"NONE\" == h.show_span || \"None\" == h.show_span || \"none\" == h.show_span || gs.nil(h.show_span)) &amp;&amp; (v = !0); 1 == h.show_start_trigger &amp;&amp; (x = !0), 1 == h.show_stop_trigger &amp;&amp; (k = !0) } var G = s.task.snapshot_created_trigger + \"\", E = s.task.snapshot_complete_trigger + \"\", O = this._generateToolTips(s, t, d, T, f, x, k, m), L = this._getDurationColor(f); e.spans.push({ guid: b, label: a, startTime: o, startDisplayTime: d, endTime: g, endDisplayTime: T, durationDisplay: f, duration: u, tooltip: O, color: L, createTrigger: G, completeTrigger: E, useTextLabel: v, textLabel: y }) } }, _createHierarchy: function (e) { var t = [], i = []; try { for (var r = 0; r &lt; e.length; r++) { for (var n = [], a = 0; a &lt; e.length; a++) if (e[a] != e[r]) { for (var s = !1, l = 0; l &lt; i.length; l++) i[l] == e[a] &amp;&amp; (s = !0); 0 == s &amp;&amp; (n.push(e[a]), i.push(e[r])) } t.push({ tier: \"level\" + r, table: e[r].table, name: e[r].name, label: e[r].label, values: n }) } } catch (o) { gs.info(\"Error: \" + o.message) } return t }, _getSnapshotTable: function (e) { var t = \"\", i = new GlideRecord(\"x_milte_timedetail_snapshot_definition\"); return i.addQuery(\"source_table.name\", e), i.query(), i.next() &amp;&amp; (t = i.snapshot_table.name + \"\", this.scopeName = i.snapshot_table.sys_scope.scope + \"\"), t } });</value>
    </sys_rest_message_fn_parameters>
</record_update>
