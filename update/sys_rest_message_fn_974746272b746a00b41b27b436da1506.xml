<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_rest_message_fn">
    <sys_rest_message_fn action="INSERT_OR_UPDATE">
        <authentication_type>basic_simple</authentication_type>
        <basic_auth_password>uBBw45dA+Wx7MaSa+EyjGA==</basic_auth_password>
        <basic_auth_profile display_value="x_milte_timedetail_api">388a0e672b746a00b41b27b436da1552</basic_auth_profile>
        <basic_auth_user>x_milte_timedetail_api</basic_auth_user>
        <content>{&#13;
  "name": "${name}",&#13;
  "api_name": "${api_name}",&#13;
  "client_callable": "${client_callable}",&#13;
  "description": "${description}",&#13;
  "script": "var TimelineItem = GlideTimelineItem; var StringUtil = GlideStringUtil; Array.prototype.map = function (func) { var newArray = []; for (var i = 0; i &lt; this.length; i++) { newArray.push(func(this[i])); } return newArray; }; Array.prototype.filter = function (fun) { \'use strict\'; if (this === void 0 || this === null) { throw new TypeError(); } var t = Object(this); var len = t.length &gt;&gt;&gt; 0; if (typeof fun !== \'function\') { throw new TypeError(); } var res = []; var thisArg = arguments.length &gt;= 2 ? arguments[1] : void 0; for (var i = 0; i &lt; len; i++) { if (i in t) { var val = t[i]; if (fun.call(thisArg, val, i, t)) { res.push(val); } } } return res; }; var TaskTimeLine2 = Class.create(); TaskTimeLine2.prototype = Object.extendsObject(AbstractTimelineSchedulePage, { getItems: function () { var taskID = this.getParameter(\"sysparm_timeline_task_id\"); var table = this.getParameter(\"sysparm_timeline_table\"); var sourceTable = table; var multipleTasks = { ticketNumbers: [], processingMultiple: false }; this.setPageTitle(table + \" Timeline\"); if (String(taskID).indexOf(\',\') &gt; -1) { var tasks = String(taskID).split(\',\'); for (var i = 0; i &lt; tasks.length; i++) { multipleTasks.processingMultiple = true; this._drawTimeLineForRecord(table, tasks[i], multipleTasks); } } else { this._drawTimeLineForRecord(table, taskID, multipleTasks); } }, _drawTimeLineForRecord: function (table, taskID, multipleTasks) { this.scopeName = \"x_milte_timedetail_\"; try { gs.info(\"table: \" + table + \" taskID: \" + taskID); var gr = new GlideRecord(table); if (gr.get(taskID)) { var ticketNumber = \"\"; if (typeof (gr.number) != \'undefined\' &amp;&amp; !gr.number.nil()) { ticketNumber = gr.number; this.setPageTitle(\" Timeline details for \" + ticketNumber); } else if (typeof (gr.name) != \'undefined\' &amp;&amp; !gr.name.nil()) { this.setPageTitle(\" Timeline details for \" + String(gr.name)); ticketNumber = String(gr.name); } else { this.setPageTitle(\" Timeline details for \" + String(gr.sys_id)); ticketNumber = String(gr.sys_id); } if (!gs.nil(multipleTasks)) { if (multipleTasks.processingMultiple) { multipleTasks.ticketNumbers.push(ticketNumber); } if (multipleTasks.ticketNumbers.length &gt; 1) { this.setPageTitle(\" Timeline details for \" + multipleTasks.ticketNumbers.toString()); } } var ticket = new global.GlideTimelineItem(ticketNumber); ticket.setLeftLabelText(ticketNumber); ticket.setImage(\'../images/icons/all.gifx\'); ticket.setTextBold(true); var snapshotTable = this._getSnapshotTable(table); var startTimeObj = this._getEarliestStartTime(gr, table, snapshotTable); var startTime = startTimeObj.startTime; var endTimeObj = this._getLatestEndTime(gr, table, snapshotTable); var endTime = endTimeObj.endTime; var duration = new GlideDuration(); var startDT = startTimeObj.startTimeDTO; var endDT = endTimeObj.endTimeDTO; if (!endTimeObj.useCurrentTime) { duration = GlideDateTime.subtract(startDT, endDT); } else { var currentEndTime = new GlideDateTime(gs.nowNoTZ()); duration = GlideDateTime.subtract(startDT, currentEndTime); } var dur = duration.getDisplayValue(); ticketSpan = ticket.createTimelineSpan(table, gr.sys_id); ticketSpan.setTimeSpan(startTime, endTime); ticketSpan.setSpanText(dur); ticketSpan.setTooltip(this._generateTopToolTip(gr, table, startTimeObj.startTimeDTO.getDisplayValue(), endTimeObj.endTimeDTO.getDisplayValue(), dur, false, false, endTimeObj.useCurrentTime)); ticketSpan.setSpanColor(\"#F5DEB3\"); this.add(ticket); this._generateSpannedItems(gr, ticketNumber, table, snapshotTable); } } catch (err) { gs.log(\'Error: \' + err.message, \'lifeg\'); } }, _generateSpannedItems: function (gr, ticketNumber, sourceTable, snapshotTable) { var hArray = []; var ganttFields = new GlideRecord(\'x_milte_timedetail_gantt_field\'); ganttFields.addQuery(\'snapshot_definition.source_table.name\', sourceTable); ganttFields.orderBy(\'order\'); ganttFields.query(); while (ganttFields.next()) { var isTrigger = this._isTriggerField(sourceTable, String(ganttFields.field.element)); var useAsLabel = false; if (ganttFields.type == \'tree_only\' || ganttFields.type == \'tree___tooltip\') { useAsLabel = true; } hArray.push({ name: String(ganttFields.field.element), table: String(ganttFields.field.name), isTrigger: isTrigger, label: useAsLabel }); } var hierarchy = []; hierarchy = this._createHierarchy(hArray); this._generateLabels(hierarchy, sourceTable, snapshotTable, gr); }, _isTriggerField: function (sourceTable, fieldName) { var result = false; var count = new GlideAggregate(\'x_milte_timedetail_snapshot_trigger\'); count.addQuery(\'snapshot_definition.source_table.name\', sourceTable); count.addQuery(\'trigger_field.element\', fieldName); count.addAggregate(\'COUNT\'); count.query(); var records = 0; if (count.next()) { records = count.getAggregate(\'COUNT\'); } if (records &gt; 0) { result = true; } return result; }, _getDurationColor: function (dur) { if (dur.indexOf(\'Month\') &gt; -1) { return \"#DC143C\"; } else if (dur.indexOf(\'Week\') &gt; -1) { return \"#008000\"; } else if (dur.indexOf(\'Day\') &gt; -1) { return \"#800080\"; } else if (dur.indexOf(\'Hour\') &gt; -1) { return \"#0000FF\"; } else if (dur.indexOf(\'Minute\') &gt; -1) { return \"#ff9416\"; } else { return \"#FFD700\"; } }, _getEarliestStartTime: function (ticket, sourceTable, snapshotTable) { var startTimeObj = { startTime: 0 }; var gr = new GlideRecord(\'task_sla\'); var query = \"task.sys_class_name=\" + snapshotTable + \"^task.ref_\" + snapshotTable + \".\" + this.scopeName + \"_\" + sourceTable + \".sys_id=\" + String(ticket.sys_id); gs.info(\"early query: \" + query); gr.addEncodedQuery(query); gr.orderBy(\'start_time\'); gr.query(); if (gr.next()) { startTimeObj.startTime = gr.getElement(\'start_time\').getGlideObject().getNumericValue(); startTimeObj.startTimeDTO = gr.getElement(\'start_time\').getGlideObject(); } return startTimeObj; }, _getLatestEndTime: function (ticket, sourceTable, snapshotTable) { var endTimeObj = { endTime: 0, useCurrentTime: false }; var gr = new GlideRecord(\'task_sla\'); var query = \"task.sys_class_name=\" + snapshotTable + \"^task.ref_\" + snapshotTable + \".\" + this.scopeName + \"_\" + sourceTable + \".sys_id=\" + String(ticket.sys_id); gr.addEncodedQuery(query); gr.orderByDesc(\'start_time\'); gr.query(); if (gr.next()) { endTimeObj.endTime = gr.getElement(\'end_time\').getGlideObject().getNumericValue(); if (gr.end_time.nil()) { endTimeObj.endTime = (new GlideDateTime(gs.nowNoTZ())).getNumericValue(); endTimeObj.useCurrentTime = true; } endTimeObj.endTimeDTO = gr.getElement(\'end_time\').getGlideObject(); } return endTimeObj; }, _generateTopToolTip: function (gr, sourceTable, slaStart, slaEnd, slaDur, showStartTrigger, showStopTrigger, useCurrentDur) { var tt = \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:5px;\"&gt;\'; var ganttFields = new GlideRecord(\'x_milte_timedetail_gantt_field\'); ganttFields.addQuery(\'snapshot_definition.source_table.name\', sourceTable); ganttFields.addQuery(\'type\', \'IN\', \'tree___tooltip,tooltip_only\'); ganttFields.orderByDesc(\'title_field\'); ganttFields.orderBy(\'order\'); ganttFields.query(); while (ganttFields.next()) { if (ganttFields.title_field) { tt += \'&lt;strong&gt;&lt;font color=blue&gt;\' + global.StringUtil.escapeHTML(gr[ganttFields.field.element]) + \'&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;\'; tt += \'&lt;/div&gt;\'; tt += \'&lt;div style=\"padding-top:5px;\"&gt;\'; } else { var displayValue = global.StringUtil.escapeHTML(gr[ganttFields.field.element].getDisplayValue()); if (gs.nil(displayValue) || displayValue == \'\') { displayValue = \'Not Set\'; } if (this._isTriggerField(sourceTable, String(ganttFields.field.element))) { tt += \'&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:5px;\"/&gt;&lt;strong&gt;\' + ganttFields.field.column_label + \': &lt;/strong&gt;&lt;font color=blue&gt;\' + displayValue + \'&lt;/font&gt;&lt;br/&gt;\'; } else { tt += \'&lt;strong&gt;\' + ganttFields.field.column_label + \': &lt;/strong&gt;&lt;font color=blue&gt;\' + displayValue + \'&lt;/font&gt;&lt;br/&gt;\'; } } } tt += \"&lt;strong&gt;Actual Start: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaStart + \'&lt;/font&gt;&lt;br /&gt;\'; if (!useCurrentDur) { tt += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaEnd + \'&lt;/font&gt;&lt;br /&gt;\'; tt += \"&lt;strong&gt;Total Actual Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaDur + \'&lt;/font&gt;&lt;br /&gt;\'; } else { tt += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;Not Set&lt;/font&gt;&lt;br /&gt;\"; tt += \"&lt;strong&gt;Total Current Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaDur + \'&lt;/font&gt;&lt;br /&gt;\'; } tt += \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:4px;\"&gt;&lt;/div&gt;\'; tt += \'&lt;div style=\"margin-top:5px\"&gt;&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:2px;margin-left:2px;\"/&gt; = Trigger field&lt;/div&gt;\'; tt += \'&lt;div style=\"padding-top:4px;\"&gt;\'; tt += \'&lt;/div&gt;&lt;/div&gt;\'; return tt; }, _generateToolTips: function (gr, sourceTable, slaStart, slaEnd, slaDur, showStartTrigger, showStopTrigger, useCurrentDur) { var createTrigger = String(gr.task.x_milte_timedetail_snapshot_created_trigger); var completeTrigger = String(gr.task.x_milte_timedetail_snapshot_completed_trigger); var tt = \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:5px;\"&gt;\'; var ganttFields = new GlideRecord(\'x_milte_timedetail_gantt_field\'); ganttFields.addQuery(\'snapshot_definition.source_table.name\', sourceTable); ganttFields.addQuery(\'type\', \'IN\', \'tree___tooltip,tooltip_only\'); ganttFields.orderByDesc(\'title_field\'); ganttFields.orderBy(\'order\'); ganttFields.query(); while (ganttFields.next()) { if (ganttFields.title_field) { tt += \'&lt;strong&gt;&lt;font color=blue&gt;\' + global.StringUtil.escapeHTML(gr.task[ganttFields.field.element]) + \'&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;\'; tt += \'&lt;/div&gt;\'; tt += \'&lt;div style=\"padding-top:5px;\"&gt;\'; } else { var displayValue = global.StringUtil.escapeHTML(gr.task[ganttFields.field.element].getDisplayValue()); if (gs.nil(displayValue) || displayValue == \'\') { displayValue = \'Not Set\'; } if (this._isTriggerField(sourceTable, String(ganttFields.field.element))) { tt += \'&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:5px;\"/&gt;&lt;strong&gt;\' + ganttFields.field.column_label + \': &lt;/strong&gt;&lt;font color=blue&gt;\' + displayValue + \'&lt;/font&gt;&lt;br/&gt;\'; } else { tt += \'&lt;strong&gt;\' + ganttFields.field.column_label + \': &lt;/strong&gt;&lt;font color=blue&gt;\' + displayValue + \'&lt;/font&gt;&lt;br/&gt;\'; } } } if (showStartTrigger == true) { tt += \"&lt;strong&gt;Start Trigger: &lt;/strong&gt;&lt;font color=blue&gt;\" + createTrigger + \'&lt;/font&gt;&lt;br /&gt;\'; } if (showStopTrigger == true) { tt += \"&lt;strong&gt;Stop Trigger: &lt;/strong&gt;&lt;font color=blue&gt;\" + completeTrigger + \'&lt;/font&gt;&lt;br /&gt;\'; } tt += \"&lt;strong&gt;Actual Start: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaStart + \'&lt;/font&gt;&lt;br /&gt;\'; if (!useCurrentDur) { tt += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaEnd + \'&lt;/font&gt;&lt;br /&gt;\'; tt += \"&lt;strong&gt;Actual Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaDur + \'&lt;/font&gt;&lt;br /&gt;\'; } else { tt += \"&lt;strong&gt;Actual End: &lt;/strong&gt;&lt;font color=blue&gt;Not Set&lt;/font&gt;&lt;br /&gt;\"; tt += \"&lt;strong&gt;Current Duration: &lt;/strong&gt;&lt;font color=blue&gt;\" + slaDur + \'&lt;/font&gt;&lt;br /&gt;\'; } tt += \'&lt;div style=\"padding:2px;\"&gt;&lt;div style=\"font-size:10pt;border-bottom:1px solid #ccc;padding-bottom:4px;\"&gt;&lt;/div&gt;\'; tt += \'&lt;div style=\"margin-top:5px\"&gt;&lt;img src=\"T.png\" width=\"15\" height=\"15\" style=\"opacity:0.4;margin-right:2px;margin-left:2px;\"/&gt; = Trigger field&lt;/div&gt;\'; tt += \'&lt;div style=\"padding-top:4px;\"&gt;\'; tt += \'&lt;/div&gt;&lt;/div&gt;\'; return tt; }, inputBox: function (ticketNumber) { var table = this.getParameter(\"sysparm_timeline_table\"); var multipleTasks = { ticketNumbers: [], processingMultiple: false }; gs.info(\"inputBox - table: \" + table + \" number: \" + ticketNumber); var gr = new GlideRecord(table); gr.addQuery(\'sys_class_name\', table); gr.addQuery(\'number\', ticketNumber); gr.query(); if (gr.next()) { this._drawTimeLineForRecord(table, String(gr.sys_id), multipleTasks); return this.setDoReRenderTimeline(true); } }, _guid: function () { function s4() { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); } return s4() + s4() + \'-\' + s4() + \'-\' + s4() + \'-\' + s4() + \'-\' + s4() + s4() + s4(); }, _generateLabels: function (hierarchy, sourceTable, snapshotTable, ticket) { var i = 0; var query = \"\"; var timeSpans = { spans: [] }; var Values = this._getTopTierValues(sourceTable, snapshotTable, ticket, hierarchy[0]); this._valConstruct(timeSpans, sourceTable, snapshotTable, ticket, Values, hierarchy, 0, null, null); timeSpans.spans.sort(this._compare); var timeSpansToAdd = []; for (var s = 0; s &lt; timeSpans.spans.length; s++) { var timeLineEntry = new global.TimelineItem(sourceTable, timeSpans.spans[s].guid); timeLineEntry.setLeftLabelText(timeSpans.spans[s].label); timeLineEntry.setParent(ticket.number); var span = timeLineEntry.createTimelineSpan(sourceTable, timeSpans.spans[s].guid); if (timeSpans.spans[s].useTextLabel == true) { span.setSpanText(timeSpans.spans[s].textLabel); } else { span.setSpanText(timeSpans.spans[s].durationDisplay); } span.setTimeSpan(timeSpans.spans[s].startTime, timeSpans.spans[s].endTime); span.setTooltip(timeSpans.spans[s].tooltip); span.setSpanColor(timeSpans.spans[s].color); timeSpansToAdd.push(timeLineEntry); } for (var e = 0; e &lt; timeSpansToAdd.length; e++) { this.add(timeSpansToAdd[e]); } }, _compare: function (a, b) { if (a.startTime &lt; b.startTime) return -1; if (a.startTime &gt; b.startTime) return 1; return 0; }, _valConstruct: function (timeSpans, sourceTable, snapshotTable, ticket, Values, hierarchy, i, label, queryPart) { for (var val = 0; val &lt; Values.length; val++) { var valLabel = \"\"; if (!gs.nil(label)) { valLabel = label; } if (hierarchy[i].label) { if (valLabel == \"\") { var valLabel = String(Values[val].label); } else { valLabel += \' -&gt; \' + String(Values[val].label); } } if (typeof (hierarchy[i + 1]) != \'undefined\') { var newQueryPart = \"\"; if (!gs.nil(queryPart)) { newQueryPart = queryPart; } if (String(hierarchy[i].table) == \'task\') { newQueryPart += \'^task.\' + String(hierarchy[i].name) + \'=\' + String(Values[val].name); } else { newQueryPart += \'^task.ref_\' + String(snapshotTable) + \'.\' + String(hierarchy[i].name) + \'=\' + String(Values[val].name); } var n = i + 1; var nextLevelVals = this._getTopTierValues(sourceTable, snapshotTable, ticket, hierarchy[n], newQueryPart); this._valConstruct(timeSpans, sourceTable, snapshotTable, ticket, nextLevelVals, hierarchy, n, valLabel, newQueryPart); } else { var newQueryPart = \"\"; if (!gs.nil(queryPart)) { newQueryPart = queryPart; } if (String(hierarchy[i].table) == \'task\') { newQueryPart += \'^task.\' + String(hierarchy[i].name) + \'=\' + String(Values[val].name); } else { newQueryPart += \'^task.ref_\' + String(snapshotTable) + \'.\' + String(hierarchy[i].name) + \'=\' + String(Values[val].name); } this._createTimeSpans(timeSpans, sourceTable, snapshotTable, ticket, newQueryPart, valLabel); } } }, _getTopTierValues: function (sourceTable, snapshotTable, ticket, tier, queryPart) { var orderedValues = []; var gr = new GlideRecord(\'task_sla\'); var query = \"task.sys_class_name=\" + snapshotTable + \"^task.ref_\" + snapshotTable + \".\" + this.scopeName + \"_\" + sourceTable + \".sys_id=\" + ticket.sys_id; if (!gs.nil(queryPart)) { query += queryPart; } gr.addEncodedQuery(query); gr.orderBy(\'start_time\'); gr.query(); while (gr.next()) { var valuePresent = false; for (var i = 0; i &lt; orderedValues.length; i++) { if (orderedValues[i].name == gr.task[tier.name] || (orderedValues[i].name == \'\' &amp;&amp; gr.task[tier.name].nil())) { valuePresent = true; } } if (valuePresent == false) { if (gr.task[tier.name].nil()) { orderedValues.push({ name: \'\', label: \'Not Set\' }); } else { orderedValues.push({ name: String(gr.task[tier.name]), label: gr.task[tier.name].getDisplayValue() }); } } } return orderedValues; }, _createTimeSpans: function (timeSpans, sourceTable, snapshotTable, ticket, queryPart, label) { var gr = new GlideRecord(\'task_sla\'); var query = \"task.sys_class_name=\" + snapshotTable + \"^task.ref_\" + snapshotTable + \".\" + this.scopeName + \"_\" + sourceTable + \".sys_id=\" + ticket.sys_id; if (!gs.nil(queryPart)) { query += queryPart; } gr.addEncodedQuery(query); gr.orderBy(\'start_time\'); gr.query(); while (gr.next()) { var startTime = gr.getElement(\'start_time\').getGlideObject().getNumericValue(); var startDisplayTime = gr.start_time.getDisplayValue(); var endTime = gr.getElement(\'end_time\').getGlideObject().getNumericValue(); var useCurrentDur = false; if (gr.end_time.nil()) { endTime = (new GlideDateTime(gs.nowNoTZ())).getNumericValue(); useCurrentDur = true; } var duration = new GlideDuration(); var startDT = gr.getElement(\'start_time\').getGlideObject(); var endDT = gr.getElement(\'end_time\').getGlideObject(); if (!useCurrentDur) { duration = GlideDateTime.subtract(startDT, endDT); } else { var currentEndTime = new GlideDateTime(gs.nowNoTZ()); duration = GlideDateTime.subtract(startDT, currentEndTime); } var dur = duration.getDisplayValue(); var endDisplayTime = gr.end_time.getDisplayValue(); var thisGuid = gr.sys_id + \'_\' + this._guid(); var snapDef = new GlideRecord(\'x_milte_timedetail_snapshot_definition\'); snapDef.addQuery(\'source_table.name\', sourceTable); snapDef.addQuery(\'snapshot_table.name\', snapshotTable); snapDef.query(); var textLabel = \"\"; var useTextLabel = false; var showStartTrigger = false; var showStopTrigger = false; if (snapDef.next()) { if (snapDef.show_span == \'text_fields\') { useTextLabel = true; var textFields = String(snapDef.span_text_fields).split(\',\'); for (var i = 0; i &lt; textFields.length; i++) { var textFieldName = textFields[i]; var labelVal = gr.task[textFieldName].getDisplayValue(); if (gs.nil(labelVal)) { labelVal = \'Not Set\'; } if (textLabel == \"\") { textLabel = labelVal; } else { textLabel += \', \' + labelVal; } } } else if (snapDef.show_span == \'NONE\' || snapDef.show_span == \'None\' || snapDef.show_span == \'none\' || gs.nil(snapDef.show_span)) { useTextLabel = true; } if (snapDef.show_start_trigger == true) { showStartTrigger = true; } if (snapDef.show_stop_trigger == true) { showStopTrigger = true; } } var createTrigger = String(gr.task.x_milte_timedetail_snapshot_created_trigger); var completeTrigger = String(gr.task.x_milte_timedetail_snapshot_completed_trigger); var toolTip = this._generateToolTips(gr, sourceTable, startDisplayTime, endDisplayTime, dur, showStartTrigger, showStopTrigger, useCurrentDur); var color = this._getDurationColor(dur); timeSpans.spans.push({ guid: thisGuid, label: label, startTime: startTime, startDisplayTime: startDisplayTime, endTime: endTime, endDisplayTime: endDisplayTime, durationDisplay: dur, duration: duration, tooltip: toolTip, color: color, createTrigger: createTrigger, completeTrigger: completeTrigger, useTextLabel: useTextLabel, textLabel: textLabel }); } }, _createHierarchy: function (hArray) { var hierarchy = []; var higherLevelProcessed = []; try { for (var i = 0; i &lt; hArray.length; i++) { var valueArr = []; for (var c = 0; c &lt; hArray.length; c++) { if (hArray[c] != hArray[i]) { var hProcessed = false; for (var h = 0; h &lt; higherLevelProcessed.length; h++) { if (higherLevelProcessed[h] == hArray[c]) { hProcessed = true; } } if (hProcessed == false) { valueArr.push(hArray[c]); higherLevelProcessed.push(hArray[i]); } } } hierarchy.push({ tier: \"level\" + i, table: hArray[i].table, name: hArray[i].name, label: hArray[i].label, values: valueArr }); } } catch (err) { gs.info(\'Error: \' + err.message); } return hierarchy; }, _getSnapshotTable: function (sourceTable) { var snapshotTableName = \"\"; var gr = new GlideRecord(\'x_milte_timedetail_snapshot_definition\'); gr.addQuery(\'source_table.name\', sourceTable); gr.query(); if (gr.next()) { snapshotTableName = String(gr.snapshot_table.name); this.scopeName = String(gr.snapshot_table.sys_scope.scope); } return snapshotTableName; } });",&#13;
  "access": "${access}",&#13;
  "sys_scope": "${scope}"&#13;
}</content>
        <function_name>post</function_name>
        <lock>true</lock>
        <oauth2_profile/>
        <protocol_name/>
        <rest_endpoint>${instance}/api/now/table/sys_script_include</rest_endpoint>
        <rest_message display_value="sys_script_include">4e0706272b746a00b41b27b436da15e0</rest_message>
        <sys_class_name>sys_rest_message_fn</sys_class_name>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2016-07-29 23:28:31</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>974746272b746a00b41b27b436da1506</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>post</sys_name>
        <sys_package display_value="Timeline Details" source="x_milte_timedetail">1e12c3a42be79640b41b27b436da15f2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Timeline Details">1e12c3a42be79640b41b27b436da15f2</sys_scope>
        <sys_update_name>sys_rest_message_fn_974746272b746a00b41b27b436da1506</sys_update_name>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2016-08-05 23:16:34</sys_updated_on>
        <use_basic_auth>true</use_basic_auth>
        <use_mid_server/>
        <use_mutual_auth>false</use_mutual_auth>
    </sys_rest_message_fn>
</record_update>
