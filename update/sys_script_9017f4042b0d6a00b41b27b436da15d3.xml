<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>task</collection>
        <condition>(new x_milte_timedetail.SnapshotTrigger()).triggerHasChanged(current.getTableName()) == true</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Snapshot</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
    //This function will be automatically called when this rule is processed.
    var currentCopy = copyGlideRecord(current);

    triggerEvent(currentCopy);
    function triggerEvent(currentCopy) {
        gs.eventQueue("x_milte_timedetail.snapshot.triggered", current, currentCopy, getVars().u_triggers);
    }

    function getVars() {
        var vars = {};
        try {
            vars.u_triggers = (new SnapshotTrigger().buildTriggers(current.getTableName()));
        }
        catch (err) {
            gs.info('Error building vars: ' + err.message);
        }
        return vars;
    }

    function copyGlideRecord(gr) {
        var copy = "{";
        for (var propName in gr) {
            if (propName) {
                //if ((String(propName).indexOf('domain') == -1 && String(propName).indexOf('sys_') > -1) || String(propName) == "parent") { }
                //else {
                try {
                    //gs.info("typeof(propName): " + typeof (propName));
                    if (!gs.nil(gr[propName]) && propName != "hierarchical_variables") {
                        if (copy == '{') {
                            copy += '"' + propName + '":' + (new global.JSON().encode(String(gr[propName])));
                        }
                        else {
                            copy += ',"' + propName + '":' + (new global.JSON().encode(String(gr[propName])));
                        }
                    }
                }
                catch (err) {
                    gs.info("Error setting snapshot field value: " + err.message + " propName: " + propName);
                }
                //  }
            }
        }
        copy += '}';
       // gs.info('JSON GR: ' + copy);
        return copy;
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2016-07-31 06:57:08</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9017f4042b0d6a00b41b27b436da15d3</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Create Snapshot</sys_name>
        <sys_overrides/>
        <sys_package display_value="Timeline Details" source="x_milte_timedetail">1e12c3a42be79640b41b27b436da15f2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Timeline Details">1e12c3a42be79640b41b27b436da15f2</sys_scope>
        <sys_update_name>sys_script_9017f4042b0d6a00b41b27b436da15d3</sys_update_name>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2016-07-31 07:04:47</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=9017f4042b0d6a00b41b27b436da15d3"/>
</record_update>
