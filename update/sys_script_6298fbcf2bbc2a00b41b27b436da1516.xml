<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_milte_timedetail_snapshot_definition</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_milte_timedetail_snapshot_definition">left_pane_fieldsVALCHANGES^ORtooltip_text_fieldsVALCHANGES^EQ<item endquery="false" field="left_pane_fields" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="tooltip_text_fields" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Gantt Fields</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
    createGanntFields();

    function createGanntFields() {
        var leftPaneFields = String(current.left_pane_fields).split(',');
        var tooltipFields = String(current.tooltip_text_fields).split(',');
        var titleField = String(current.tooltip_title_field);
        var ganntObjects = [];
        // For each Left Pane Field
        for (var i = 0; i < leftPaneFields.length; i++) {
            // If ganntObject doesn't exist create
            var ganntObjExists = false;
            for (var g = 0; g < ganntObjects.length; g++) {
                if (ganntObjects[g].name == leftPaneFields[i]) {
                    ganntObjExists = true;
                }
            }

            // If is also a tooltip field
            var isTooltip = false;
            for (var t = 0; t < tooltipFields.length; t++) {
                if (leftPaneFields[i] == tooltipFields[t]) {
                    isTooltip = true;
                }
            }

            if (!ganntObjExists) {
                // Create
                if (isTooltip) {
                    // Is tree & tooltip
                    ganntObjects.push({ name: leftPaneFields[i], type: "tree___tooltip", order: i });
                }
                else {
                    // Is tree only
                    ganntObjects.push({ name: leftPaneFields[i], type: "tree_only", order: i });
                }
            }
            else {
                // Update Type if different
                if (isTooltip) {
                    for (var g = 0; g < ganntObjects.length; g++) {
                        if (ganntObjects[g].name == leftPaneFields[i]) {
                            if (ganntObjects[g].type != "tree___tooltip") {
                                ganntObjects[g].type = "tree___tooltip";
                            }
                        }
                    }
                }
                else { // Tree only
                    for (var g = 0; g < ganntObjects.length; g++) {
                        if (ganntObjects[g].name == leftPaneFields[i]) {
                            if (ganntObjects[g].type != "tree_only") {
                                ganntObjects[g].type = "tree_only";
                            }
                        }
                    }
                }
            }
        }

        // For each Tooltip Field
        for (var t = 0; t < tooltipFields.length; t++) {
            // If ganntObject doesn't exist create
            var ganntObjExists = false;
            for (var g = 0; g < ganntObjects.length; g++) {
                if (ganntObjects[g].name == tooltipFields[t]) {
                    ganntObjExists = true;
                }
            }

            // If is also a left pane field
            var isLeftPane = false;
            for (var i = 0; i < leftPaneFields.length; i++) {
                if (leftPaneFields[i] == tooltipFields[t]) {
                    isLeftPane = true;
                }
            }

            // Create/Update GanntObject
            if (!ganntObjExists) {
                // Create
                if (isLeftPane) {
                    // Is tree & tooltip
                    ganntObjects.push({ name: tooltipFields[t], type: "tree___tooltip", order: t });
                }
                else {
                    // Is tooltip only
                    ganntObjects.push({ name: tooltipFields[t], type: "tooltip_only", order: t });
                }
            }
            else {
                // Update Type if different
                if (isLeftPane) {
                    for (var g = 0; g < ganntObjects.length; g++) {
                        if (ganntObjects[g].name == tooltipFields[t]) {
                            if (ganntObjects[g].type != "tree___tooltip") {
                                ganntObjects[g].type = "tree___tooltip";
                            }
                        }
                    }
                }
                else { // Tooltip only
                    for (var g = 0; g < ganntObjects.length; g++) {
                        if (ganntObjects[g].name == tooltipFields[t]) {
                            if (ganntObjects[g].type != "tooltip_only") {
                                ganntObjects[g].type = "tooltip_only";
                            }
                        }
                    }
                }
            }
        }

        // Create or Update Gannt Fields
        for (var g = 0; g < ganntObjects.length; g++) {
            var gFields = new GlideRecord('x_milte_timedetail_gantt_field');
            gFields.addQuery('field_name', ganntObjects[g].name);
            gFields.addQuery('snapshot_definition', current.sys_id);
            gFields.query();
            if (gFields.next()) {
                gFields.order = ganntObjects[g].order;
                gFields.type = ganntObjects[g].type;
                if (ganntObjects[g].name == titleField) {
                    gFields.title_field = true;
                }
                gFields.snapshot_definition = current.sys_id;
                gFields.update();
            }
            else {
                gFields.initialize();
                gFields.order = ganntObjects[g].order;
                gFields.type = ganntObjects[g].type;
                gFields.field_name = String(ganntObjects[g].name);
                if (ganntObjects[g].name == titleField) {
                    gFields.title_field = true;
                }
                gFields.snapshot_definition = current.sys_id;
                gFields.insert();
            }
        }

    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2016-07-28 18:38:44</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6298fbcf2bbc2a00b41b27b436da1516</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Create Gantt Fields</sys_name>
        <sys_overrides/>
        <sys_package display_value="Timeline Details" source="x_milte_timedetail">1e12c3a42be79640b41b27b436da15f2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Timeline Details">1e12c3a42be79640b41b27b436da15f2</sys_scope>
        <sys_update_name>sys_script_6298fbcf2bbc2a00b41b27b436da1516</sys_update_name>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2016-07-29 20:16:03</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=6298fbcf2bbc2a00b41b27b436da1516"/>
</record_update>
