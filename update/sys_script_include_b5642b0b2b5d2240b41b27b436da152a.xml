<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_milte_timedetail.CombinationAlgorithms</api_name>
        <client_callable>false</client_callable>
        <description>A collection of combination algorithms.</description>
        <name>CombinationAlgorithms</name>
        <script><![CDATA[var CombinationAlgorithms = Class.create();
CombinationAlgorithms.prototype = {
    initialize: function () {
    },

    // Uses a combination of Heap's Algorithm and Combinations algorithm
    // input = string example "01234"
    getAllCombinations: function(input) {

        var finalCombinations = [];
        var combinationArr = this.combinations(input); // Input
        for (var i = 0; i < combinationArr.length; i++) {
            if (combinationArr[i].length > 1) {
                var permArray = this.permutationArr(combinationArr[i]);
                for (var n = 0; n < permArray.length; n++) {
                    finalCombinations.push(permArray[n]);
                }
            }
            else {
                finalCombinations.push(combinationArr[i]);
            }
        }

        for (var i = 0; i < finalCombinations.length; i++) {
            gs.info(finalCombinations[i]);
        }
        return finalCombinations;
    },


    // Combination Algorithm
    combinations: function(str) {
        var fn = function (active, rest, a) {
            if (!active && !rest)
                return;
            if (!rest) {
                a.push(active);
            } else {
                fn(active + rest[0], rest.slice(1), a);
                fn(active, rest.slice(1), a);
            }
            return a;
        }
        return fn("", str, []);
    },

    // Heap's Algorithm 
    permutationArr: function(num) {
        var arr = (num + '').split(''),
        permutations = [];

        function swap(a, b) {
            var tmp = arr[a];
            arr[a] = arr[b];
            arr[b] = tmp;
        }

        function generate(n) {
            if (n == 1) {
                permutations.push(arr.join());
            } else {
                for (var i = 0; i != n; ++i) {
                    generate(n - 1);
                    swap(n % 2 ? 0 : i, n - 1);
                }
            }
        }

        generate(arr.length);
        return permutations;
    },



    type: 'CombinationAlgorithms'
};

]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mmoody</sys_created_by>
        <sys_created_on>2016-08-22 13:36:28</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>b5642b0b2b5d2240b41b27b436da152a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CombinationAlgorithms</sys_name>
        <sys_package display_value="Timeline Details" source="x_milte_timedetail">1e12c3a42be79640b41b27b436da15f2</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Timeline Details">1e12c3a42be79640b41b27b436da15f2</sys_scope>
        <sys_update_name>sys_script_include_b5642b0b2b5d2240b41b27b436da152a</sys_update_name>
        <sys_updated_by>mmoody</sys_updated_by>
        <sys_updated_on>2016-08-22 13:36:28</sys_updated_on>
    </sys_script_include>
</record_update>
